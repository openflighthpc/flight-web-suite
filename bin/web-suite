#!/usr/bin/env ruby
#==============================================================================
# Copyright (C) 2021-present Alces Flight Ltd.
#
# This file is part of Flight Web Suite.
#
# This program and the accompanying materials are made available under
# the terms of the Eclipse Public License 2.0 which is available at
# <https://www.eclipse.org/legal/epl-2.0>, or alternative license
# terms made available by Alces Flight Ltd - please direct inquiries
# about licensing to licensing@alces-flight.com.
#
# Flight Web Suite is distributed in the hope that it will be useful, but
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR
# IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS
# OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A
# PARTICULAR PURPOSE. See the Eclipse Public License 2.0 for more
# details.
#
# You should have received a copy of the Eclipse Public License 2.0
# along with Flight Web Suite. If not, see:
#
#  https://opensource.org/licenses/EPL-2.0
#
# For more information on Flight Web Suite, please visit:
# https://github.com/openflighthpc/flight-web-suite
#==============================================================================

begin
  # Reads the environment setup
  ENV['BUNDLE_GEMFILE'] ||= File.join(__FILE__, '../../Gemfile')

  require 'rubygems'
  require 'bundler'
  Bundler.setup(:default)

  # Limited use of dotenv to support setting flight_ENVIRONMENT=development.
  # NOTE: The GitHub .env.development default is 'development', but the underlying default
  #       is 'production' if both env files are omitted.
  require 'dotenv'
  dot_files = [ '../.env.development.local', '../.env.development' ].map do |file|
    File.expand_path(file, __dir__)
  end
  Dotenv.load(*dot_files)

  require_relative '../lib/flight'

  # Attempt to enable development mode if requested
  if Flight.env.development?
    begin
      Bundler.setup(:default, :development)
      require 'pry'
      require 'pry-byebug'
    rescue StandardError, LoadError
      Bundler.setup(:default)
      $stderr.puts "An error occurred when enabling development mode!"
    end
  end

  # Start the error handler
  require 'commander'
  name = ENV.fetch('FLIGHT_PROGRAM_NAME', 'bin/web-suite')
  Commander::ErrorHandler.new(name).start do |handler|
    argv = handler.parse_trace(*ARGV) # Allows for --trace handling without slop

    require_relative '../lib/flight_web_suite/configuration'
    Flight.load_configuration

    require_relative '../lib/flight_web_suite/cli'
    Dir.chdir(ENV.fetch('FLIGHT_CWD', '.')) do
      OpenFlight.set_standard_env rescue nil
      FlightWebSuite::CLI.run(*argv)
    end
  end
rescue Interrupt
  if Kernel.const_defined?(:Paint)
    $stderr.print "\n#{Paint['WARNING', :underline, :yellow]}: Cancelled by user"
  else
    $stderr.print "\nWARNING: Cancelled by user"
  end
  raise SignalException.new(2)
end
